# Day 12: Hot Springs

## Part one

```elixir
sample_input =
  """
  ???.### 1,1,3
  .??..??...?##. 1,1,3
  ?#?#?#?#?#?#?#? 1,3,1,6
  ????.#...#... 4,1,1
  ????.######..#####. 1,6,5
  ?###???????? 3,2,1
  """
```

```elixir
10 |> Integer.to_string(2) |> String.split("", trim: true)
```

```elixir
defmodule HotSprings do
  def sum_count_arrangements(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(&count_arrangements/1)
    |> Enum.sum()
  end

  defp count_arrangements(line) do
    [damaged_spring_list, groups] = String.split(line, " ", trim: true)

    groups = groups |> String.split(",") |> Enum.map(&String.to_integer/1)
    unknown_count = damaged_spring_list |> String.to_charlist() |> Enum.count(&(&1 == ??))

    0..(Integer.pow(2, unknown_count) - 1)
    |> Enum.count(fn nr ->
      damaged_spring_list
      |> merge_into(nr, unknown_count)
      |> complies?(groups)
    end)
  end

  defp merge_into(damaged_spring_spec, nr, unknown_count) do
    nr
    |> Integer.to_string(2)
    |> String.pad_leading(unknown_count, "0")
    |> String.split("", trim: true)
    |> Enum.map(fn
      "0" -> "#"
      "1" -> "."
    end)
    |> Enum.reduce(damaged_spring_spec, fn replacement, acc ->
      String.replace(acc, "?", replacement, global: false)
    end)
  end

  defp complies?(damaged_spring_spec, groups),
    do: to_damaged_groups(damaged_spring_spec) == groups

  defp to_damaged_groups(damaged_spring_spec) do
    damaged_spring_spec
    |> String.split("", trim: true)
    |> Enum.chunk_by(& &1)
    |> Enum.filter(fn [first | _] -> first == "#" end)
    |> Enum.map(&length/1)
  end
end
```

```elixir
HotSprings.sum_count_arrangements(sample_input)
# expected 21
```

```elixir
Path.join(__DIR__, "day-12.input")
|> File.read!()
|> HotSprings.sum_count_arrangements()

# 6827
# this is slooooooooow (70 seconds)
```
